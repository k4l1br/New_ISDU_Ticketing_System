<?php

namespace App\Http\Controllers;

use App\Models\Ticket;
use App\Models\reqOffice;
use App\Models\Reference;
use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;

class ticketController extends Controller
{
    /**
     * Display a listing of the tickets.
     */
    public function index(Request $request)
    {
        $user = Auth::user();
        
        // Get search parameters
        $search = $request->get('search');
        $status = $request->get('status');
        $perPage = $request->get('per_page', 10); // Default 10 per page
        
        if ($user->isSuperAdmin()) {
            // Super admin can see all tickets with pagination
            $query = Ticket::query();
            
            // Apply search filters
            if ($search) {
                $query->where(function($q) use ($search) {
                    $q->where('req_office', 'like', "%{$search}%")
                      ->orWhere('reference', 'like', "%{$search}%")
                      ->orWhere('authority', 'like', "%{$search}%")
                      ->orWhere('unit_responsible', 'like', "%{$search}%")
                      ->orWhere('fullName', 'like', "%{$search}%");
                });
            }
            
            if ($status) {
                $query->where('status', 'like', "%{$status}%");
            }
            
            $tickets = $query->orderBy('created_at', 'desc')->paginate($perPage);
            
        } elseif ($user->isAdmin()) {
            // Admin can see tickets assigned to their unit OR assigned to them by name with pagination
            $query = Ticket::where(function($q) use ($user) {
                if ($user->unit) {
                    $q->where('unit_responsible', $user->unit);
                }
                $q->orWhere('unit_responsible', $user->name);
            });
            
            // Apply search filters
            if ($search) {
                $query->where(function($q) use ($search) {
                    $q->where('req_office', 'like', "%{$search}%")
                      ->orWhere('reference', 'like', "%{$search}%")
                      ->orWhere('authority', 'like', "%{$search}%")
                      ->orWhere('unit_responsible', 'like', "%{$search}%")
                      ->orWhere('fullName', 'like', "%{$search}%");
                });
            }
            
            if ($status) {
                $query->where('status', 'like', "%{$status}%");
            }
            
            $tickets = $query->orderBy('created_at', 'desc')->paginate($perPage);
            
        } else {
            $tickets = collect(); // No tickets for other users
        }
        
        return view('shared.tickets.index', compact('tickets'));
    }

    /**
     * Show the form for creating a new ticket.
     */
   public function create()
    {
        $user = Auth::user();
        
        // Only super admin can create tickets
        if (!$user->isSuperAdmin()) {
            abort(403, 'Access denied. Only super administrators can create tickets.');
        }
        
        $positions = \App\Models\positionModel::orderBy('name')->pluck('name');
        $reqOffices = reqOffice::orderBy('reqOffice')->pluck('reqOffice');
        $references = Reference::orderBy('reference_type')->pluck('reference_type', 'id');
        $statuses = \App\Models\Status::orderBy('name')->pluck('name');
        
        // Get all admin users for assignment
        $adminUsers = User::where('role', 'admin')
                         ->orderBy('name')
                         ->get(['id', 'name', 'unit'])
                         ->toArray();
        
        // Debug: Log available admin users
        Log::info('Available admin users for assignment:', $adminUsers);

        return view('superadmin.tickets.create', compact('positions', 'reqOffices', 'references', 'statuses', 'adminUsers'));
    }

    /**
     * Store a newly created ticket in storage.
     */
    public function store(Request $request)
    {
        $user = Auth::user();
        
        // Only super admin can create tickets
        if (!$user->isSuperAdmin()) {
            abort(403, 'Access denied. Only super administrators can create tickets.');
        }
        
        $validated = $request->validate([
            'fullName' => 'required|string|max:255',
            'position' => 'required|string|max:255',
            'designation' => 'required|string|max:255',
            'contactNumber' => 'required|string|max:255',
            'emailAddress' => 'required|email|max:255',
            'reqOffice' => 'required|string|max:255',
            'reference' => 'required|string|max:255',
            'authority' => 'required|string|max:255',
            'status' => 'required|string|max:255',
            'unitResponsible' => 'required|string|max:255',
            'description' => 'required|string|min:10|max:2000',
        ]);

        // If 'Others' is selected in reqOffice, use the custom value
        if ($request->reqOffice === 'Others' && $request->filled('reqOffice_other')) {
            $validated['reqOffice'] = $request->reqOffice_other;

            // Save 'Others' to session
            $otherOffices = session('other_offices', []);
            if (!in_array($request->reqOffice_other, $otherOffices)) {
                $otherOffices[] = $request->reqOffice_other;
                session(['other_offices' => $otherOffices]);
            }
        }

        // Map camelCase form fields to snake_case database fields
        $ticketData = [
            'full_name' => $validated['fullName'],
            'position' => $validated['position'],
            'designation' => $validated['designation'],
            'contact_number' => $validated['contactNumber'],
            'email_address' => $validated['emailAddress'],
            'req_office' => $validated['reqOffice'],
            'reference' => $validated['reference'],
            'authority' => $validated['authority'],
            'status' => $validated['status'],
            'unit_responsible' => $validated['unitResponsible'],
            'description' => $validated['description'],
        ];

        Ticket::create($ticketData);

        return redirect()->route('ticket.index')->with('success', 'Ticket created successfully.');
    }

    /**
     * Display the specified ticket.
     */
    public function show(Ticket $ticket)
    {
        $user = Auth::user();
        
        // Check if user can view this ticket
        if ($user->isSuperAdmin() || 
            ($user->isAdmin() && ($ticket->unit_responsible === $user->name || 
                                 ($user->unit && $ticket->unit_responsible === $user->unit)))) {
            return view('shared.tickets.show', compact('ticket'));
        }
        
        abort(403, 'Access denied.');
    }

    /**
     * Show the form for editing the specified ticket.
     */
    public function edit(Ticket $ticket)
    {
        $user = Auth::user();
        
        // Only super admin can edit tickets
        if (!$user->isSuperAdmin()) {
            abort(403, 'Access denied. Only super administrators can edit tickets.');
        }
        
        $positions = \App\Models\positionModel::orderBy('name')->pluck('name')->toArray();
        $reqOffices = reqOffice::orderBy('reqOffice')->pluck('reqOffice')->toArray();
        $references = Reference::orderBy('reference_type')->pluck('reference_type', 'id');
        $statuses = \App\Models\Status::orderBy('name')->pluck('name');
        
        // Get available units from admin users
        $availableUnits = User::where('role', 'admin')
                             ->whereNotNull('unit')
                             ->distinct()
                             ->pluck('unit')
                             ->toArray();

        return view('shared.tickets.edit', compact('ticket', 'positions', 'reqOffices', 'references', 'statuses', 'availableUnits'));
    }

    /**
     * Update the specified ticket in storage.
     */
    public function update(Request $request, Ticket $ticket)
    {
        $user = Auth::user();
        
        // Only super admin can update tickets
        if (!$user->isSuperAdmin()) {
            abort(403, 'Access denied. Only super administrators can update tickets.');
        }

        // Super admin can update all fields
        $rules = [
            'fullName' => 'required|string|max:255',
            'position' => 'required|string|max:255',
            'designation' => 'required|string|max:255',
            'contactNumber' => 'required|string|max:255',
            'emailAddress' => 'required|email|max:255',
            'reqOffice' => 'required|string|max:255',
            'reference' => 'required|string|max:255',
            'authority' => 'required|string|max:255',
            'status' => 'required|string|max:255',
            'unitResponsible' => 'required|string|max:255',
            'description' => 'required|string|min:10|max:2000',
        ];
        
        $validated = $request->validate($rules);

        // Map camelCase form fields to snake_case database fields
        $ticketData = [
            'full_name' => $validated['fullName'],
            'position' => $validated['position'],
            'designation' => $validated['designation'],
            'contact_number' => $validated['contactNumber'],
            'email_address' => $validated['emailAddress'],
            'req_office' => $validated['reqOffice'],
            'reference' => $validated['reference'],
            'authority' => $validated['authority'],
            'status' => $validated['status'],
            'unit_responsible' => $validated['unitResponsible'],
            'description' => $validated['description'],
        ];
        
        $ticket->update($ticketData);

        return redirect()->route('ticket.index')->with('success', 'Ticket updated successfully.');
    }

    /**
     * Remove the specified ticket from storage.
     */
    public function destroy(Ticket $ticket)
    {
        $user = Auth::user();
        
        // Only super admin can delete tickets
        if (!$user->isSuperAdmin()) {
            abort(403, 'Access denied.');
        }
        
        $ticket->delete();
        return redirect()->route('ticket.index')->with('success', 'Ticket deleted successfully.');
    }

    /**
     * Display tickets assigned to current admin user
     */
    public function myTickets()
    {
        $user = Auth::user();
        
        if (!$user->isAdmin()) {
            abort(403, 'Access denied.');
        }
        
        // Admin can see tickets assigned to their unit OR assigned to them by name
        $tickets = Ticket::where(function($query) use ($user) {
            if ($user->unit) {
                $query->where('unit_responsible', $user->unit);
            }
            $query->orWhere('unit_responsible', $user->name);
        })->get();
        
        return view('shared.tickets.my-tickets', compact('tickets'));
    }

    public function getNotificationCount()
    {
        $user = Auth::user();
        
        if ($user) {
            $count = Ticket::where(function($query) use ($user) {
                if ($user->isSuperAdmin()) {
                    $query->where('status', '!=', 'complete');
                } else {
                    $query->where('status', '!=', 'complete')
                          ->where(function($q) use ($user) {
                              $q->where('assignee', $user->name)
                                ->orWhere('unit_responsible', $user->name);
                          });
                }
            })->count();
        } else {
            $count = 0;
        }
        
        return response()->json(['count' => $count]);
    }
}
